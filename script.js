'use strict';

// 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk WebSocket
let socket;
let isListening = false;
let mediaRecorder;
let audioContext;
let processor;

// –°–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
const devices = {
  // –î–∞—Ç—á–∏–∫–∏
  sensor_1: { 
    name: '–¢–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä', 
    state: '20¬∞C | 45%',
    type: 'sensor',
    online: true,
    icon: 'üå°Ô∏è',
    values: { temp: '20', humidity: '45' },
    commands: ['check_temperature', 'check_humidity'] 
  },
  sensor_2: { 
    name: '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞', 
    state: 'CO‚ÇÇ: 412ppm',
    type: 'sensor',
    online: true,
    icon: 'üí®', 
    values: { co2: '412' },
    commands: ['check_air'] 
  },
  sensor_3: { 
    name: '–°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏', 
    state: '1.24',
    type: 'value',
    online: true,
    icon: '‚ö°',
    unit: ' –∫–í—Ç‚ãÖ—á',
    baseValue: 1.24,
    commands: ['check_energy', 'sensor_check', 'sensor_reset']
  },
  
  // –ú—É–∑—ã–∫–∞
  speaker: { 
    name: '–ö–æ–ª–æ–Ω–∫–∞', 
    state: 'off',
    type: 'switch',
    online: false,
    icon: 'üîä',
    commands: ['music_on', 'music_off']
  },
  
  // –®—Ç–æ—Ä—ã
  curtains: { 
    name: '–®—Ç–æ—Ä—ã', 
    state: 'off',
    type: 'switch',
    online: true,
    icon: 'ü™ü',
    states: { 'on': '–û—Ç–∫—Ä—ã—Ç—ã', 'off': '–ó–∞–∫—Ä—ã—Ç—ã' },
    commands: ['curtains_open', 'curtains_close', 'check_curtains']
  },
  
  // –¢–í
  tv: { 
    name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', 
    state: 'off',
    type: 'switch',
    online: true,
    icon: 'üì∫',
    commands: ['tv_on', 'tv_off', 'check_tv']
  },
  
  // –ë–∞—Ç–∞—Ä–µ—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è
  heater: { 
    name: '–ë–∞—Ç–∞—Ä–µ—è', 
    state: '22',
    type: 'value',
    online: true,
    icon: 'üî•', 
    unit: '¬∞C',
    commands: ['temperature_up', 'temperature_down', 'check_temperature']
  }
};

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
let logElem;
let statusElem;
let textInput;
let sendButton;
let micButton;
let themeToggle;
let lastCommandText;
let deviceCards = {};
let devicesContainer;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initApp);

function initApp() {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
  logElem = document.querySelector('#log');
  statusElem = document.querySelector('#status');
  textInput = document.querySelector('#text');
  sendButton = document.querySelector('#send');
  micButton = document.querySelector('#mic');
  themeToggle = document.querySelector('#theme-toggle');
  lastCommandText = document.querySelector('#last-command-text');
  devicesContainer = document.querySelector('#devices-container');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  createDeviceCards();

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  sendButton.addEventListener('click', handleSendClick);
  micButton.addEventListener('click', handleMicClick);
  themeToggle.addEventListener('click', toggleTheme);
  textInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') handleSendClick();
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  updateAllDevices();

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  log('‚úÖ mini Smart Home Assistant –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

  // –†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
  warmupModel();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
function createDeviceCards() {
  for (const [deviceId, device] of Object.entries(devices)) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const card = document.createElement('div');
    card.className = 'device-card';
    card.dataset.device = deviceId;
    
    // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const iconElem = document.createElement('div');
    iconElem.className = 'device-icon';
    iconElem.textContent = device.icon;
    
    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const infoElem = document.createElement('div');
    infoElem.className = 'device-info';
    
    // –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const nameElem = document.createElement('div');
    nameElem.className = 'device-name';
    nameElem.textContent = device.name;
    
    // –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const statusElem = document.createElement('div');
    statusElem.className = `device-status ${device.online ? 'online' : 'offline'}`;
    statusElem.textContent = device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const indicatorElem = document.createElement('div');
    indicatorElem.className = `device-indicator ${device.online ? 'on' : 'off'}`;
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    infoElem.appendChild(nameElem);
    infoElem.appendChild(statusElem);
    card.appendChild(iconElem);
    card.appendChild(infoElem);
    card.appendChild(indicatorElem);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    devicesContainer.appendChild(card);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    deviceCards[deviceId] = {
      card: card,
      icon: iconElem,
      status: statusElem,
      indicator: indicatorElem
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
    card.addEventListener('click', () => toggleDeviceOnline(deviceId));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  console.log(message);
  if (logElem) {
    logElem.textContent += message + '\n';
    logElem.scrollTop = logElem.scrollHeight;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function handleSendClick() {
  const text = textInput.value.trim();
  if(!text) return;
  await processCommand(text);
  textInput.value = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function handleMicClick() {
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  micButton.classList.toggle('recording');
  
  if (isListening) {
    log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...');
    stopListening();
  } else {
    log('–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏...');
    await startListening();
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
  const body = document.body;
  
  if (body.classList.contains('light-theme')) {
    body.classList.remove('light-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    body.classList.add('light-theme');
    themeToggle.textContent = 'üåô';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç -> –¥–µ–π—Å—Ç–≤–∏–µ)
async function processCommand(text) {
  try {
    log(`–ö–æ–º–∞–Ω–¥–∞: "${text}"`);
    updateLastCommand(text);
    statusElem.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...';
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const res = await fetch('http://localhost:8080/classify', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({text})
    });
    
    const data = await res.json();
    log(`–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${data.text} ‚Üí ${data.intent}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Ç-–∫–æ–º–∞–Ω–¥—ã
    executeDeviceCommand(data.intent, data.text);
    
    statusElem.textContent = '';
  } catch(e) {
    console.error(e);
    log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${e.message}`);
    statusElem.textContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ' + e.message;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function executeDeviceCommand(intent, text) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  for (const [deviceId, device] of Object.entries(devices)) {
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (device.commands && device.commands.includes(intent)) {
      log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ ${intent} –¥–ª—è ${device.name}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (!device.online) {
        showDeviceOfflineMessage(device.name);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
      switch (intent) {
        // –®—Ç–æ—Ä—ã
        case 'curtains_open':
          updateDeviceState(deviceId, 'on');
          break;
        case 'curtains_close':
          updateDeviceState(deviceId, 'off');
          break;
        case 'check_curtains':
          showDeviceValue(deviceId, device.state === 'on' ? '–û—Ç–∫—Ä—ã—Ç—ã' : '–ó–∞–∫—Ä—ã—Ç—ã');
          break;
        
        // –¢–í
        case 'tv_on':
          updateDeviceState(deviceId, 'on');
          break;
        case 'tv_off':
          updateDeviceState(deviceId, 'off');
          break;
        case 'check_tv':
          showDeviceValue(deviceId, device.state === 'on' ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω');
          break;
          
        // –ú—É–∑—ã–∫–∞
        case 'music_on':
          updateDeviceState(deviceId, 'on');
          break;
        case 'music_off':
          updateDeviceState(deviceId, 'off');
          break;
          
        // –î–∞—Ç—á–∏–∫–∏
        case 'check_temperature':
          if (deviceId === 'sensor_1') {
            showDeviceValue(deviceId, `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${devices.sensor_1.values.temp}¬∞C`);
          } else if (deviceId === 'heater') {
            showDeviceValue(deviceId, `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${devices.heater.state}¬∞C`);
          }
          break;
        case 'check_humidity':
          showDeviceValue('sensor_1', `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${devices.sensor_1.values.humidity}%`);
          break;
        case 'check_air':
          showDeviceValue('sensor_2', `CO‚ÇÇ: ${devices.sensor_2.values.co2} ppm`);
          break;
        case 'check_energy':
          showDeviceValue('sensor_3', `–†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏: ${devices.sensor_3.state}${devices.sensor_3.unit}`);
          break;
          
        // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        case 'temperature_up':
          let currentTemp = parseFloat(devices.heater.state);
          updateDeviceState(deviceId, (currentTemp + 1).toString());
          break;
        case 'temperature_down':
          let currTemp = parseFloat(devices.heater.state);
          updateDeviceState(deviceId, (currTemp - 1).toString());
          break;
          
        // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤
        case 'sensor_check':
          checkSensors();
          break;
        case 'sensor_reset':
          resetSensors();
          break;
      }
      
      return; // –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    }
  }
  
  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
  log(`–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: ${intent}`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function showDeviceOfflineMessage(deviceName) {
  log(`‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${deviceName}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
  
  // –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  const popup = document.createElement('div');
  popup.className = 'show-device-value';
  popup.innerHTML = `
    <h3>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</h3>
    <div class="value">
      <p>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${deviceName}" —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏.</p>
      <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</p>
    </div>
    <button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>
  `;
  
  document.body.appendChild(popup);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    popup.style.opacity = '1';
    popup.style.transform = 'scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    popup.style.opacity = '0';
    popup.style.transform = 'scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function showDeviceValue(deviceId, value) {
  const device = devices[deviceId];
  if (!device) return;
  
  log(`üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ${device.name}: ${value}`);
  
  // –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º
  const popup = document.createElement('div');
  popup.className = 'show-device-value';
  popup.innerHTML = `
    <h3>${device.name}</h3>
    <div class="value">
      <p>${value}</p>
    </div>
    <button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>
  `;
  
  document.body.appendChild(popup);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    popup.style.opacity = '1';
    popup.style.transform = 'scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    popup.style.opacity = '0';
    popup.style.transform = 'scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function getDeviceDisplayValue(deviceId) {
  const device = devices[deviceId];
  if (!device) return '';
  
  switch (device.type) {
    case 'sensor':
      return device.state;
    case 'switch':
      if (device.states && device.states[device.state]) {
        return device.states[device.state];
      }
      return device.state === 'on' ? '–í–∫–ª' : '–í—ã–∫–ª';
    case 'value':
      return `${device.state}${device.unit || ''}`;
    default:
      return device.state;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
function checkSensors() {
  log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤:');
  
  // –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const popup = document.createElement('div');
  popup.className = 'show-device-value';
  
  let sensorInfo = '<h3>–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤</h3><div class="value">';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∞—Ç—á–∏–∫—É
  if (devices.sensor_1.online) {
    sensorInfo += `<p>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${devices.sensor_1.values.temp}¬∞C | –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${devices.sensor_1.values.humidity}%</p>`;
  } else {
    sensorInfo += '<p>üå°Ô∏è –¢–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  if (devices.sensor_2.online) {
    sensorInfo += `<p>üí® CO‚ÇÇ: ${devices.sensor_2.values.co2} ppm</p>`;
  } else {
    sensorInfo += '<p>üí® –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  if (devices.sensor_3.online) {
    sensorInfo += `<p>‚ö° –†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏: ${devices.sensor_3.state}${devices.sensor_3.unit}</p>`;
  } else {
    sensorInfo += '<p>‚ö° –°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–æ–ø–ª–µ–Ω–∏–∏
  if (devices.heater.online) {
    sensorInfo += `<p>üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: ${devices.heater.state}¬∞C</p>`;
  }
  
  sensorInfo += '</div><button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>';
  popup.innerHTML = sensorInfo;
  
  document.body.appendChild(popup);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    popup.style.opacity = '1';
    popup.style.transform = 'scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    popup.style.opacity = '0';
    popup.style.transform = 'scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  });
}

// –°–±—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
function resetSensors() {
  log('üîÑ –°–±—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
  if (devices.sensor_3.online) {
    devices.sensor_3.state = '0.00';
    updateDeviceDisplay('sensor_3');
  }
  
  showDeviceValue('sensor_3', `–°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ —Å–±—Ä–æ—à–µ–Ω: ${devices.sensor_3.state}${devices.sensor_3.unit}`);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Wirenboard
function sendCommandToWirenboard(deviceId, command, value) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Wirenboard: ${deviceId} ${command} ${value}`);
  
  return true; // –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function updateDeviceState(deviceId, newState) {
  const device = devices[deviceId];
  if (!device) return false;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  device.state = newState;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateDeviceDisplay(deviceId);
  
  // –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (device.type === 'switch') {
    const stateText = device.states ? 
        device.states[newState] : 
        (newState === 'on' ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
    
    showDeviceValue(deviceId, `${device.name} ${stateText}`);
  }
  
  // –î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  else if (device.type === 'value') {
    showDeviceValue(deviceId, `${device.name}: ${newState}${device.unit || ''}`);
  }
  
  return true;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function updateDeviceDisplay(deviceId) {
  const device = devices[deviceId];
  const cardElems = deviceCards[deviceId];
  
  if (!device || !cardElems) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (device.online) {
    cardElems.indicator.className = 'device-indicator on';
    cardElems.status.className = 'device-status online';
    cardElems.status.textContent = '–û–Ω–ª–∞–π–Ω';
    
    // –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    if (device.type === 'switch' && device.state === 'on') {
      cardElems.card.classList.add('active');
    } else {
      cardElems.card.classList.remove('active');
    }
  } else {
    cardElems.indicator.className = 'device-indicator off';
    cardElems.status.className = 'device-status offline';
    cardElems.status.textContent = '–û—Ñ–ª–∞–π–Ω';
    cardElems.card.classList.remove('active');
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function toggleDeviceOnline(deviceId) {
  const device = devices[deviceId];
  if (!device) return;
  
  // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  device.online = !device.online;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateDeviceDisplay(deviceId);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  log(`${device.online ? 'üü¢' : 'üî¥'} –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${device.name}" ${device.online ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}`);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π)
function toggleDeviceState(deviceId) {
  const device = devices[deviceId];
  if (!device || device.type !== 'switch' || !device.online) return;
  
  // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const newState = device.state === 'on' ? 'off' : 'on';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  updateDeviceState(deviceId, newState);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  const stateText = device.states ? 
      device.states[newState] : 
      (newState === 'on' ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  
  log(`üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${device.name}" ${stateText}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function updateAllDevices() {
  for (const deviceId in devices) {
    updateDeviceDisplay(deviceId);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
function updateLastCommand(text) {
  if (lastCommandText) {
    lastCommandText.textContent = text;
  }
}

// –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
async function classifyText(text) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é,
  // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
}

// –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
async function startListening() {
  try {
    isListening = true;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true
      }
    });
    
    log('üé§ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
    
    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const source = audioContext.createMediaStreamSource(stream);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
    processor = audioContext.createScriptProcessor(4096, 1, 1);
    processor.onaudioprocess = audioProcessingEvent => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
      const inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    };
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–∑–ª—ã
    source.connect(processor);
    processor.connect(audioContext.destination);
    
    // –°–æ–∑–¥–∞–µ–º MediaRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    mediaRecorder = new MediaRecorder(stream);
    const chunks = [];
    
    mediaRecorder.ondataavailable = e => {
      chunks.push(e.data);
    };
    
    mediaRecorder.onstop = async () => {
      log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏...');
      statusElem.textContent = '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...';
      
      // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const blob = new Blob(chunks, { type: 'audio/webm' });
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        const formData = new FormData();
        formData.append('audio', blob);
        
        const response = await fetch('http://localhost:8080/recognize', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result && result.text) {
          log(`üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${result.text}"`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          await processCommand(result.text);
        } else {
          log('‚ö†Ô∏è –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
        }
      } catch (error) {
        console.error('Error sending audio for recognition:', error);
        log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      }
      
      statusElem.textContent = '';
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
    mediaRecorder.start();
    statusElem.textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
    
  } catch (error) {
    console.error('Error accessing microphone:', error);
    log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    isListening = false;
    micButton.classList.remove('recording');
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function stopListening() {
  isListening = false;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
  if (mediaRecorder && mediaRecorder.state !== 'inactive') {
    mediaRecorder.stop();
  }
  
  // –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  if (processor && audioContext) {
    processor.disconnect();
    audioContext.close().then(() => {
      log('üé§ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    });
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  mediaRecorder = null;
  audioContext = null;
  processor = null;
}

// –†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
async function warmupModel() {
  try {
    log('üîÑ –†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ NLP...');
    const res = await fetch('http://localhost:8080/warmup');
    const data = await res.json();
    log('‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: ' + data.message);
  } catch(e) {
    console.error(e);
    log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏');
  }
} 
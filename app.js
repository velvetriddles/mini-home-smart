'use strict';

// 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk WebSocket
let socket;
let isListening = false;
let mediaRecorder;
let audioContext;
let processor;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
let logElem;
let statusElem;
let textInput;
let sendButton;
let micButton;
let themeToggle;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);

function initApp() {
  logElem = document.querySelector('#log');
  statusElem = document.querySelector('#status');
  textInput = document.querySelector('#text');
  sendButton = document.querySelector('#send');
  micButton = document.querySelector('#mic');
  themeToggle = document.querySelector('#theme-toggle');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
  sendButton.addEventListener('click', handleSendClick);

  // –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  micButton.addEventListener('click', handleMicClick);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  themeToggle.addEventListener('click', toggleTheme);

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  log('‚úÖ mini Smart Home Assistant –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

  // –†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
  warmupModel();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  console.log(message);
  if (logElem) {
    logElem.textContent += message + '\n';
    logElem.scrollTop = logElem.scrollHeight;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function handleSendClick() {
  const text = textInput.value.trim();
  if(!text) return;
  await classifyText(text);
  textInput.value = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function handleMicClick() {
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  micButton.classList.toggle('recording');
  
  if (isListening) {
    log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...');
    stopListening();
  } else {
    log('–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏...');
    await startListening();
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
  const body = document.body;
  
  if (body.classList.contains('light-theme')) {
    body.classList.remove('light-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    body.classList.add('light-theme');
    themeToggle.textContent = 'üåô';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function classifyText(text) {
  try {
    log(`–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: "${text}"`);
    statusElem.textContent = '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è...';
    
    const res = await fetch('http://localhost:8080/classify', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({text})
    });
    const d = await res.json();
    log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${d.text}  ‚Üí  ${d.intent}`);
    statusElem.textContent = '';
  } catch(e) {
    console.error(e);
    log(`–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}`);
    statusElem.textContent = '–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + e.message;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∏ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function startListening() {
  try {
    let silenceTimer;
    
    log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
    statusElem.textContent = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...';
    
    // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: {
        channelCount: 1
      }
    });
    
    log('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
    statusElem.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ AudioContext –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤—É–∫–∞
    const ctx = new (window.AudioContext || window.webkitAudioContext)({
      sampleRate: 16000
    });
    
    audioContext = ctx;
    
    log(`–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: ${audioContext.sampleRate} –ì—Ü`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ –∏–∑ –ø–æ—Ç–æ–∫–∞
    const source = audioContext.createMediaStreamSource(stream);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
    processor = audioContext.createScriptProcessor(4096, 1, 1);
    
    log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...');
    statusElem.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vosk
    socket = new WebSocket('ws://localhost:2700');
    socket.binaryType = 'arraybuffer';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Vosk
    socket.onopen = () => {
      log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Vosk
      socket.send(JSON.stringify({config:{sample_rate:16000}}));
      
      statusElem.textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
      micButton.textContent = '‚èπ –°—Ç–æ–ø';
      micButton.style.background = '#05f';
      isListening = true;
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
    processor.onaudioprocess = (e) => {
      const inData = e.inputBuffer.getChannelData(0);
      const pcm16 = new Int16Array(inData.length);
      for(let i=0; i<inData.length; i++) {
        pcm16[i] = Math.max(-1, Math.min(1, inData[i]))*32767;
      }
      if(socket.readyState === 1) socket.send(pcm16.buffer);

      clearTimeout(silenceTimer);
      silenceTimer = setTimeout(stopListening, 4000);  // –µ—Å–ª–∏ 4 —Å —Ç–∏—à–∏–Ω—ã ‚Äî —Å—Ç–æ–ø
    };
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –∫ –≤—ã—Ö–æ–¥—É
    source.connect(processor);
    processor.connect(audioContext.destination);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.onmessage = (e) => {
      const d = JSON.parse(e.data);

      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ partial-—ã
      if (d.partial && d.partial.trim() === '') return;

      log(`–û—Ç–≤–µ—Ç: ${e.data}`);

      if (d.text && d.text.trim() !== '') {
          classifyText(d.text.trim());
          stopListening();
      }
    };
    
    socket.onerror = (error) => {
      console.error('WebSocket Error:', error);
      log(`–û—à–∏–±–∫–∞ WebSocket: ${error}`);
      statusElem.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      stopListening();
    };
    
    socket.onclose = (event) => {
      console.log('WebSocket closed:', event);
      log(`WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥=${event.code}, –ø—Ä–∏—á–∏–Ω–∞=${event.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      statusElem.textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ';
      stopListening();
    };
    
  } catch(e) {
    console.error('Error:', e);
    log(`–û—à–∏–±–∫–∞: ${e.message}`);
    statusElem.textContent = '–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ' + e.message;
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
function stopListening() {
  if (socket && socket.readyState === WebSocket.OPEN) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    socket.send(JSON.stringify({"eof":1}));
    socket.close();
  }
  
  if (processor && audioContext) {
    log('–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    processor.disconnect();
    audioContext.close();
    processor = null;
    audioContext = null;
  }
  
  statusElem.textContent = '';
  micButton.textContent = 'üé§ –ì–æ–ª–æ—Å';
  micButton.style.background = '#f05';
  isListening = false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function warmupModel() {
  try {
    log('–†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    statusElem.textContent = '–ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏...';
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    await fetch('http://localhost:8080/classify', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({text: '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç'})
    });
    
    log('–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    statusElem.textContent = '';
  } catch(e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏:', e);
    log(`–ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${e.message}`);
  }
} 
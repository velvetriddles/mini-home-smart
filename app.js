'use strict';

// 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk WebSocket
let socket;
let isListening = false;
let mediaRecorder;
let audioContext;
let processor;

// –°–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
const devices = {
  // –î–∞—Ç—á–∏–∫–∏
  sensor_1: { 
    name: '–¢–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä', 
    state: '20¬∞C | 45%', 
    type: 'sensor',
    online: true,
    icon: 'üå°Ô∏è',
    values: { temp: '20', humidity: '45' },
    commands: ['check_temperature', 'check_humidity'] 
  },
  sensor_2: { 
    name: '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞', 
    state: 'CO‚ÇÇ: 412ppm', 
    type: 'sensor',
    online: true,
    icon: 'üí®', 
    values: { co2: '412' },
    commands: ['check_air'] 
  },
  sensor_3: { 
    name: '–°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏', 
    state: '1.24', 
    type: 'value',
    online: true,
    icon: '‚ö°',
    unit: ' –∫–í—Ç‚ãÖ—á',
    baseValue: 1.24,
    commands: ['check_energy', 'sensor_check', 'sensor_reset']
  },
  
  // –ú—É–∑—ã–∫–∞
  speaker: { 
    name: '–ö–æ–ª–æ–Ω–∫–∞', 
    state: 'off', 
    type: 'switch',
    online: false,
    icon: 'üîä',
    commands: ['music_on', 'music_off']
  },
  
  // –®—Ç–æ—Ä—ã
  curtains: { 
    name: '–®—Ç–æ—Ä—ã', 
    state: 'off', 
    type: 'switch',
    online: true,
    icon: 'ü™ü',
    states: { 'on': '–û—Ç–∫—Ä—ã—Ç—ã', 'off': '–ó–∞–∫—Ä—ã—Ç—ã' },
    commands: ['curtains_open', 'curtains_close', 'check_curtains']
  },
  
  // –¢–í
  tv: { 
    name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', 
    state: 'off', 
    type: 'switch',
    online: true,
    icon: 'üì∫',
    commands: ['tv_on', 'tv_off', 'check_tv']
  },
  
  // –ë–∞—Ç–∞—Ä–µ—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è
  heater: { 
    name: '–ë–∞—Ç–∞—Ä–µ—è', 
    state: '22', 
    type: 'value',
    online: true,
    icon: 'üî•', 
    unit: '¬∞C',
    commands: ['temperature_up', 'temperature_down', 'check_temperature']
  }
};

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
let logElem;
let statusElem;
let textInput;
let sendButton;
let micButton;
let themeToggle;
let lastCommandText;
let deviceCards = {};
let devicesContainer;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);

function initApp() {
  logElem = document.querySelector('#log');
  statusElem = document.querySelector('#status');
  textInput = document.querySelector('#text');
  sendButton = document.querySelector('#send');
  micButton = document.querySelector('#mic');
  themeToggle = document.querySelector('#theme-toggle');
  lastCommandText = document.querySelector('#last-command-text');
  devicesContainer = document.querySelector('#devices-container');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  createDeviceCards();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
  sendButton.addEventListener('click', handleSendClick);

  // –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  micButton.addEventListener('click', handleMicClick);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  themeToggle.addEventListener('click', toggleTheme);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  updateAllDevices();

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  log('‚úÖ mini Smart Home Assistant –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

  // –†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
  warmupModel();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
function createDeviceCards() {
  for (const [deviceId, device] of Object.entries(devices)) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const card = document.createElement('div');
    card.className = 'device-card';
    card.dataset.device = deviceId;
    
    // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const iconElem = document.createElement('div');
    iconElem.className = 'device-icon';
    iconElem.textContent = device.icon || 'üì±';
    
    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const infoElem = document.createElement('div');
    infoElem.className = 'device-info';
    
    // –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const nameElem = document.createElement('div');
    nameElem.className = 'device-name';
    nameElem.textContent = device.name;
    
    // –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const statusElem = document.createElement('div');
    statusElem.className = `device-status ${device.online ? 'online' : 'offline'}`;
    statusElem.textContent = device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const indicatorElem = document.createElement('div');
    indicatorElem.className = `device-indicator ${device.online ? 'on' : 'off'}`;
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    infoElem.appendChild(nameElem);
    infoElem.appendChild(statusElem);
    card.appendChild(iconElem);
    card.appendChild(infoElem);
    card.appendChild(indicatorElem);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    devicesContainer.appendChild(card);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    deviceCards[deviceId] = {
      card: card,
      icon: iconElem,
      status: statusElem,
      indicator: indicatorElem
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ online/offline
    card.addEventListener('click', (event) => {
      if (event.detail === 1) {  // –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–∫
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã
        const ripple = document.createElement('div');
        ripple.className = 'ripple';
        ripple.style.left = `${event.offsetX}px`;
        ripple.style.top = `${event.offsetY}px`;
        card.appendChild(ripple);
        
        // –£–¥–∞–ª—è–µ–º –≤–æ–ª–Ω—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
          ripple.remove();
        }, 600);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–µ–∂–¥—É –æ–¥–∏–Ω–∞—Ä–Ω—ã–º –∏ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
        const clickTimeout = setTimeout(() => {
          toggleDeviceOnline(deviceId);
        }, 300);
        
        card.setAttribute('data-click-timeout', clickTimeout);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
    card.addEventListener('dblclick', (event) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      const clickTimeout = parseInt(card.getAttribute('data-click-timeout'));
      if (clickTimeout) {
        clearTimeout(clickTimeout);
        card.removeAttribute('data-click-timeout');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      showDeviceDetails(deviceId);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      event.stopPropagation();
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  console.log(message);
  if (logElem) {
    logElem.textContent += message + '\n';
    logElem.scrollTop = logElem.scrollHeight;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function handleSendClick() {
  const text = textInput.value.trim();
  if(!text) return;
  await processCommand(text);
  textInput.value = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function handleMicClick() {
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  micButton.classList.toggle('recording');
  
  if (isListening) {
    log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...');
    stopListening();
  } else {
    log('–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏...');
    await startListening();
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
  const body = document.body;
  
  if (body.classList.contains('light-theme')) {
    body.classList.remove('light-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    body.classList.add('light-theme');
    themeToggle.textContent = 'üåô';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç -> –¥–µ–π—Å—Ç–≤–∏–µ)
async function processCommand(text) {
  try {
    log(`–ö–æ–º–∞–Ω–¥–∞: "${text}"`);
    updateLastCommand(text);
    statusElem.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...';
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const res = await fetch('http://localhost:8080/classify', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({text})
    });
    
    const data = await res.json();
    log(`–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${data.text} ‚Üí ${data.intent}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Ç-–∫–æ–º–∞–Ω–¥—ã
    executeDeviceCommand(data.intent, data.text);
    
    statusElem.textContent = '';
  } catch(e) {
    console.error(e);
    log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${e.message}`);
    statusElem.textContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ' + e.message;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function executeDeviceCommand(intent, text) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  for (const [deviceId, device] of Object.entries(devices)) {
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (device.commands && device.commands.includes(intent)) {
      log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ ${intent} –¥–ª—è ${device.name}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (!device.online) {
        showDeviceOfflineMessage(device.name);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
      switch (intent) {
        // –®—Ç–æ—Ä—ã
        case 'curtains_open':
          updateDeviceState(deviceId, 'on');
          break;
        case 'curtains_close':
          updateDeviceState(deviceId, 'off');
          break;
        case 'check_curtains':
          showDeviceValue(deviceId, device.state === 'on' ? '–û—Ç–∫—Ä—ã—Ç—ã' : '–ó–∞–∫—Ä—ã—Ç—ã');
          break;
        
        // –¢–í
        case 'tv_on':
          updateDeviceState(deviceId, 'on');
          break;
        case 'tv_off':
          updateDeviceState(deviceId, 'off');
          break;
        case 'check_tv':
          showDeviceValue(deviceId, device.state === 'on' ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω');
          break;
          
        // –ú—É–∑—ã–∫–∞
        case 'music_on':
          updateDeviceState(deviceId, 'on');
          break;
        case 'music_off':
          updateDeviceState(deviceId, 'off');
          break;
          
        // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        case 'temperature_up':
          let currentTemp = parseInt(devices[deviceId].state);
          updateDeviceState(deviceId, (currentTemp + 1).toString());
          break;
        case 'temperature_down':
          let temp = parseInt(devices[deviceId].state);
          updateDeviceState(deviceId, (temp - 1).toString());
          break;
        case 'check_temperature':
          if (deviceId === 'heater') {
            showDeviceValue(deviceId, `${device.state}${device.unit}`);
          } else if (deviceId === 'sensor_1') {
            showDeviceValue(deviceId, `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${device.values.temp}¬∞C`);
          }
          break;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
        case 'check_humidity':
          showDeviceValue('sensor_1', `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${devices.sensor_1.values.humidity}%`);
          break;
        case 'check_air':
          showDeviceValue('sensor_2', `CO‚ÇÇ: ${devices.sensor_2.values.co2}ppm`);
          break;
        case 'check_energy':
          showDeviceValue('sensor_3', `${devices.sensor_3.state}${devices.sensor_3.unit}`);
          break;
          
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤
        case 'sensor_check':
          checkSensors();
          break;
        case 'sensor_reset':
          resetSensors();
          break;
      }
      
      return;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const parts = intent.split(':');
  
  if (parts.length < 2) {
    log(`–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: ${intent}`);
    return;
  }
  
  const command = parts[0];
  const deviceId = parts[1];
  const value = parts[2];  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º
  
  if (!devices[deviceId]) {
    log(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${deviceId}`);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (!devices[deviceId].online) {
    showDeviceOfflineMessage(devices[deviceId].name);
    return;
  }
  
  log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command} –¥–ª—è ${devices[deviceId].name}`);
  
  switch (command) {
    case 'turn_on':
      updateDeviceState(deviceId, 'on');
      break;
    case 'turn_off':
      updateDeviceState(deviceId, 'off');
      break;
    case 'toggle':
      toggleDeviceState(deviceId);
      break;
    case 'set_value':
      if (value !== undefined) {
        updateDeviceState(deviceId, value);
      }
      break;
    case 'check_value':
      showDeviceValue(deviceId, getDeviceDisplayValue(deviceId));
      break;
    default:
      log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function showDeviceOfflineMessage(deviceName) {
  log(`‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${deviceName}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const messageBox = document.createElement('div');
  messageBox.className = 'show-device-value';
  messageBox.innerHTML = `
    <h3>${deviceName}</h3>
    <div class="value" style="color: var(--status-offline)">–£–°–¢–†–û–ô–°–¢–í–û –ù–ï–î–û–°–¢–£–ü–ù–û</div>
    <button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>
  `;
  
  document.body.appendChild(messageBox);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    messageBox.style.opacity = '1';
    messageBox.style.transform = 'translate(-50%, -50%) scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    messageBox.style.opacity = '0';
    messageBox.style.transform = 'translate(-50%, -50%) scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(messageBox);
    }, 300);
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (messageBox.parentNode) {
      messageBox.style.opacity = '0';
      messageBox.style.transform = 'translate(-50%, -50%) scale(0.8)';
      setTimeout(() => {
        if (messageBox.parentNode) {
          document.body.removeChild(messageBox);
        }
      }, 300);
    }
  }, 3000);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function showDeviceValue(deviceId, value) {
  const device = devices[deviceId];
  
  if (!device) return;
  
  log(`üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ${device.name}: ${value}`);
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
  const valueBox = document.createElement('div');
  valueBox.className = 'show-device-value';
  valueBox.innerHTML = `
    <h3>${device.name}</h3>
    <div class="value">${value}</div>
    <button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>
  `;
  
  document.body.appendChild(valueBox);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    valueBox.style.opacity = '1';
    valueBox.style.transform = 'translate(-50%, -50%) scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    valueBox.style.opacity = '0';
    valueBox.style.transform = 'translate(-50%, -50%) scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(valueBox);
    }, 300);
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (valueBox.parentNode) {
      valueBox.style.opacity = '0';
      valueBox.style.transform = 'translate(-50%, -50%) scale(0.8)';
      setTimeout(() => {
        if (valueBox.parentNode) {
          document.body.removeChild(valueBox);
        }
      }, 300);
    }
  }, 5000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getDeviceDisplayValue(deviceId) {
  const device = devices[deviceId];
  
  if (!device) return '';
  
  switch (deviceId) {
    case 'sensor_1':
      return `${device.values.temp}¬∞C | ${device.values.humidity}%`;
    case 'sensor_2':
      return `CO‚ÇÇ: ${device.values.co2}ppm`;
    case 'sensor_3':
    case 'heater':
      return device.state + (device.unit || '');
    default:
      return device.state;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
function checkSensors() {
  log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤...');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ–Ω—Å–æ—Ä–æ–≤
  const newValues = {
    sensor_1: { temp: (18 + Math.floor(Math.random() * 6)).toString(), 
               humidity: (40 + Math.floor(Math.random() * 20)).toString() },
    sensor_2: { co2: (400 + Math.floor(Math.random() * 100)).toString() },
    sensor_3: (Math.random() * 2 + 0.8).toFixed(2)  // –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç 0.8 –¥–æ 2.8 –∫–í—Ç‚ãÖ—á
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä
  devices.sensor_1.values = newValues.sensor_1;
  devices.sensor_1.state = `${newValues.sensor_1.temp}¬∞C | ${newValues.sensor_1.humidity}%`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞
  devices.sensor_2.values = newValues.sensor_2;
  devices.sensor_2.state = `CO‚ÇÇ: ${newValues.sensor_2.co2}ppm`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏
  devices.sensor_3.state = newValues.sensor_3;
  devices.sensor_3.baseValue = parseFloat(newValues.sensor_3);
  
  // –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const popup = document.createElement('div');
  popup.className = 'show-device-value';
  
  let sensorInfo = '<h3>–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤</h3><div class="value">';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∞—Ç—á–∏–∫—É
  if (devices.sensor_1.online) {
    sensorInfo += `<p>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${devices.sensor_1.values.temp}¬∞C | –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${devices.sensor_1.values.humidity}%</p>`;
  } else {
    sensorInfo += '<p>üå°Ô∏è –¢–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  if (devices.sensor_2.online) {
    sensorInfo += `<p>üí® CO‚ÇÇ: ${devices.sensor_2.values.co2} ppm</p>`;
  } else {
    sensorInfo += '<p>üí® –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  if (devices.sensor_3.online) {
    sensorInfo += `<p>‚ö° –†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏: ${devices.sensor_3.state}${devices.sensor_3.unit}</p>`;
  } else {
    sensorInfo += '<p>‚ö° –°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–æ–ø–ª–µ–Ω–∏–∏
  if (devices.heater.online) {
    sensorInfo += `<p>üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è: ${devices.heater.state}¬∞C</p>`;
  }
  
  sensorInfo += '</div><button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>';
  popup.innerHTML = sensorInfo;
  
  document.body.appendChild(popup);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    popup.style.opacity = '1';
    popup.style.transform = 'translate(-50%, -50%) scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    popup.style.opacity = '0';
    popup.style.transform = 'translate(-50%, -50%) scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  });
  
  log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

// –°–±—Ä–æ—Å —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function resetSensors() {
  log('–°–±—Ä–æ—Å —Å–µ–Ω—Å–æ—Ä–æ–≤...');
  
  // –¢–µ—Ä–º–æ–≥–∏–≥—Ä–æ–º–µ—Ç—Ä
  devices.sensor_1.values = { temp: '20', humidity: '45' };
  devices.sensor_1.state = '20¬∞C | 45%';
  
  // –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–¥—É—Ö–∞
  devices.sensor_2.values = { co2: '412' };
  devices.sensor_2.state = 'CO‚ÇÇ: 412ppm';
  
  // –°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏
  devices.sensor_3.state = '1.24';
  devices.sensor_3.baseValue = 1.24;
  
  log('–°–µ–Ω—Å–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã');
  showDeviceValue('sensor_1', '–î–∞—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Wirenboard (–∑–∞–≥–ª—É—à–∫–∞)
function sendCommandToWirenboard(deviceId, command, value) {
  // –ü—Ä–∏–º–µ—Ä REST API –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Wirenboard
  // fetch('http://wirenboard-ip/api/v1/devices/' + deviceId + '/controls', 
  //   { method: 'POST', body: JSON.stringify({ value: value }) }
  // );
  log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Wirenboard: ${deviceId}, ${command}, ${value}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function updateDeviceState(deviceId, newState) {
  if (!devices[deviceId]) return;
  
  const device = devices[deviceId];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (!device.online) {
    showDeviceOfflineMessage(device.name);
    return;
  }
  
  device.state = newState;
  
  updateDeviceDisplay(deviceId);
  
  log(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.name} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${newState}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function updateDeviceDisplay(deviceId) {
  const device = devices[deviceId];
  const uiElements = deviceCards[deviceId];
  
  if (!uiElements) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
  if (uiElements.status) {
    if (device.online) {
      uiElements.status.className = 'device-status online';
      uiElements.status.textContent = '–û–Ω–ª–∞–π–Ω';
    } else {
      uiElements.status.className = 'device-status offline';
      uiElements.status.textContent = '–û—Ñ–ª–∞–π–Ω';
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (uiElements.indicator) {
    uiElements.indicator.className = 'device-indicator ' + (device.online ? 'on' : 'off');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
  uiElements.card.classList.toggle('active', device.online && device.type === 'switch' && device.state === 'on');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function toggleDeviceOnline(deviceId) {
  if (!devices[deviceId]) return;
  
  const device = devices[deviceId];
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
  device.online = !device.online;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateDeviceDisplay(deviceId);
  
  log(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.name} ${device.online ? '–≤ —Å–µ—Ç–∏' : '–Ω–µ –≤ —Å–µ—Ç–∏'}`);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤–∫–ª/–≤—ã–∫–ª)
function toggleDeviceState(deviceId) {
  if (!devices[deviceId]) return;
  
  const device = devices[deviceId];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (!device.online) {
    showDeviceOfflineMessage(device.name);
    return;
  }
  
  if (device.type === 'switch') {
    const newState = device.state === 'on' ? 'off' : 'on';
    updateDeviceState(deviceId, newState);
  } else if (device.type === 'value' && deviceId === 'sensor_3') {
    // –î–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏: –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    const currentValue = parseFloat(device.state);
    const newValue = (currentValue + 0.05).toFixed(2);
    updateDeviceState(deviceId, newValue);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
function updateAllDevices() {
  Object.keys(devices).forEach(deviceId => {
    updateDeviceDisplay(deviceId);
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
function updateLastCommand(text) {
  if (lastCommandText) {
    lastCommandText.textContent = text;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è processCommand)
async function classifyText(text) {
  await processCommand(text);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∏ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function startListening() {
  try {
    let silenceTimer;
    
    log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
    statusElem.textContent = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...';
    
    // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: {
        channelCount: 1
      }
    });
    
    log('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
    statusElem.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ AudioContext –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤—É–∫–∞
    const ctx = new (window.AudioContext || window.webkitAudioContext)({
      sampleRate: 16000
    });
    
    audioContext = ctx;
    
    log(`–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: ${audioContext.sampleRate} –ì—Ü`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ –∏–∑ –ø–æ—Ç–æ–∫–∞
    const source = audioContext.createMediaStreamSource(stream);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
    processor = audioContext.createScriptProcessor(4096, 1, 1);
    
    log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...');
    statusElem.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vosk
    socket = new WebSocket('ws://localhost:2700');
    socket.binaryType = 'arraybuffer';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Vosk
    socket.onopen = () => {
      log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Vosk
      socket.send(JSON.stringify({config:{sample_rate:16000}}));
      
      statusElem.textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
      micButton.textContent = '‚èπ –°—Ç–æ–ø';
      micButton.style.background = '#05f';
      isListening = true;
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
    processor.onaudioprocess = (e) => {
      const inData = e.inputBuffer.getChannelData(0);
      const pcm16 = new Int16Array(inData.length);
      for(let i=0; i<inData.length; i++) {
        pcm16[i] = Math.max(-1, Math.min(1, inData[i]))*32767;
      }
      if(socket.readyState === 1) socket.send(pcm16.buffer);

      clearTimeout(silenceTimer);
      silenceTimer = setTimeout(stopListening, 4000);  // –µ—Å–ª–∏ 4 —Å —Ç–∏—à–∏–Ω—ã ‚Äî —Å—Ç–æ–ø
    };
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –∫ –≤—ã—Ö–æ–¥—É
    source.connect(processor);
    processor.connect(audioContext.destination);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.onmessage = (e) => {
      const d = JSON.parse(e.data);

      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ partial-—ã
      if (d.partial && d.partial.trim() === '') return;

      log(`–û—Ç–≤–µ—Ç: ${e.data}`);

      if (d.text && d.text.trim() !== '') {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
          processCommand(d.text.trim());
          stopListening();
      }
    };
    
    socket.onerror = (error) => {
      console.error('WebSocket Error:', error);
      log(`–û—à–∏–±–∫–∞ WebSocket: ${error}`);
      statusElem.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      stopListening();
    };
    
    socket.onclose = (event) => {
      console.log('WebSocket closed:', event);
      log(`WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥=${event.code}, –ø—Ä–∏—á–∏–Ω–∞=${event.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      statusElem.textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ';
      stopListening();
    };
    
  } catch(e) {
    console.error('Error:', e);
    log(`–û—à–∏–±–∫–∞: ${e.message}`);
    statusElem.textContent = '–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ' + e.message;
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
function stopListening() {
  if (socket && socket.readyState === WebSocket.OPEN) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    socket.send(JSON.stringify({"eof":1}));
    socket.close();
  }
  
  if (processor && audioContext) {
    log('–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    processor.disconnect();
    audioContext.close();
    processor = null;
    audioContext = null;
  }
  
  statusElem.textContent = '';
  micButton.textContent = 'üé§ –ì–æ–ª–æ—Å';
  micButton.style.background = '';
  isListening = false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function warmupModel() {
  try {
    log('–†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    statusElem.textContent = '–ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏...';
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    await fetch('http://localhost:8080/classify', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({text: '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç'})
    });
    
    log('–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    statusElem.textContent = '';
  } catch(e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏:', e);
    log(`–ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${e.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
function showDeviceDetails(deviceId) {
  const device = devices[deviceId];
  if (!device) return;
  
  let detailsHTML = '';
  
  if (device.type === 'sensor') {
    if (deviceId === 'sensor_1') {
      detailsHTML = `
        <p><strong>–¢–∏–ø:</strong> –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏</p>
        <p><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> ${device.values.temp}¬∞C</p>
        <p><strong>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</strong> ${device.values.humidity}%</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</p>
      `;
    } else if (deviceId === 'sensor_2') {
      detailsHTML = `
        <p><strong>–¢–∏–ø:</strong> –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞</p>
        <p><strong>CO‚ÇÇ:</strong> ${device.values.co2} ppm</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</p>
      `;
    }
  } else if (device.type === 'value') {
    if (deviceId === 'sensor_3') {
      detailsHTML = `
        <p><strong>–¢–∏–ø:</strong> –°—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏</p>
        <p><strong>–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> ${device.state}${device.unit}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</p>
      `;
    } else if (deviceId === 'heater') {
      detailsHTML = `
        <p><strong>–¢–∏–ø:</strong> –¢–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä</p>
        <p><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> ${device.state}¬∞C</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</p>
      `;
    }
  } else if (device.type === 'switch') {
    // –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π (—à—Ç–æ—Ä—ã, –¢–í, –∫–æ–ª–æ–Ω–∫–∞)
    let stateText = device.state === 'on' ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    if (device.states && device.states[device.state]) {
      stateText = device.states[device.state];
    }
    
    detailsHTML = `
      <p><strong>–¢–∏–ø:</strong> ${device.name}</p>
      <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${stateText}</p>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${device.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</p>
    `;
    
    if (device.online) {
      detailsHTML += `
        <div class="device-controls">
          <button class="control-button" data-action="toggle" data-device="${deviceId}">
            ${device.state === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
          </button>
        </div>
      `;
    }
  }
  
  if (!device.online) {
    detailsHTML += `<p class="device-offline-message">‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏</p>`;
  }
  
  // –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const popup = document.createElement('div');
  popup.className = 'show-device-value device-details';
  popup.innerHTML = `
    <h3>${device.icon} ${device.name}</h3>
    <div class="value">
      ${detailsHTML}
    </div>
    <button id="close-popup">–ó–∞–∫—Ä—ã—Ç—å</button>
  `;
  
  document.body.appendChild(popup);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    popup.style.opacity = '1';
    popup.style.transform = 'translate(-50%, -50%) scale(1)';
  }, 10);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
  document.getElementById('close-popup').addEventListener('click', () => {
    popup.style.opacity = '0';
    popup.style.transform = 'translate(-50%, -50%) scale(0.8)';
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
  const controlButtons = popup.querySelectorAll('.control-button');
  controlButtons.forEach(button => {
    button.addEventListener('click', () => {
      const action = button.dataset.action;
      const targetDevice = button.dataset.device;
      
      if (action === 'toggle') {
        toggleDeviceState(targetDevice);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button.textContent = devices[targetDevice].state === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å';
      }
    });
  });
} 